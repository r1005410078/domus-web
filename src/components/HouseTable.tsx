"use client";
import React, { useState } from "react";
import Menu from "@mui/joy/Menu";
import type { CellDoubleClickedEvent, ColDef } from "ag-grid-community";
import { AllCommunityModule, ModuleRegistry } from "ag-grid-community";
import { AgGridReact } from "ag-grid-react";
import { AG_GRID_LOCALE_CN } from "@ag-grid-community/locale";
import {
  Box,
  Button,
  DialogTitle,
  Drawer,
  ModalClose,
  Stack,
  Typography,
  useColorScheme,
} from "@mui/joy";
import {
  apartmentTypeToString,
  Community,
  communityToString,
  dateToString,
  door_numberToString,
  emptyToString,
  floor_rangeToString,
  HouseForm,
  ownerToString,
  stairsToString,
} from "@/models/house";
import { darkTheme, lightTheme } from "./agGridTheme";
import "@/utils/crypto-polyfill";
import { useHouseDB } from "@/hooks/useHouseDB";

import {
  CellSelectionModule,
  ClipboardModule,
  ColumnMenuModule,
  ContextMenuModule,
  LicenseManager,
  ColumnsToolPanelModule,
} from "ag-grid-enterprise";
import House from "./House";
import { useModalContent } from "@/hooks/useModalContent";
import { AlertTableHelp } from "./AlertTableHelp";

ModuleRegistry.registerModules([
  AllCommunityModule,
  ContextMenuModule,
  ColumnMenuModule,
  CellSelectionModule,
  ClipboardModule,
  ColumnsToolPanelModule,
]);

LicenseManager.setLicenseKey(
  "[v3][RELEASE][0102]_NDg2Njc4MzY3MDgzNw==16d78ca762fb5d2ff740aed081e2af7b"
);

// Row Data Interface
type IRow = Partial<HouseForm>;

interface HouseTable {}

// Create new GridExample component
export default function HouseTable({}: HouseTable) {
  const [editItem, setEditItem] = useState<IRow | null>(null);
  const {
    houseDataSource: rowData,
    refreshHouse,
    forceRefreshHouse,
  } = useHouseDB();
  const { openDetail, detailModal, openImages } = useModalContent({
    layout: "center",
  });

  const { mode } = useColorScheme();
  const gridRef = React.useRef<AgGridReact>(null);
  // Column Definitions: Defines & controls grid columns.
  const [colDefs, setColDefs] = useState<ColDef<IRow>[]>(
    [
      {
        headerName: "Â∫èÂè∑",
        valueGetter: (params: any) => params.node!.rowIndex! + 1,
        width: 100,
        pinned: "left",
        suppressMovable: true,
        cellClass: "ag-cell-center",
      },
      { field: "title", headerName: "ÊàøÊ∫êÊ†áÈ¢ò", pinned: "left" },
      {
        field: "images",
        headerName: "ÂõæÁâá",
        width: 100,
        cellRenderer: (params: any) =>
          params.value?.length ? `üì∑ ÂÖ± ${params.value.length} Âº†` : null,
      },
      { field: "purpose", width: 100, headerName: "Áî®ÈÄî" },
      { field: "transaction_type", width: 100, headerName: "‰∫§ÊòìÁ±ªÂûã" },
      { field: "house_status", width: 100, headerName: "Áä∂ÊÄÅ" },
      {
        field: "door_number",
        headerName: "Èó®ÁâåÂè∑ÁªìÊûÑ",
        valueGetter: (params: any) => {
          return door_numberToString(params.data.door_number);
        },
      },
      {
        field: "apartment_type",
        headerName: "Êà∑ÂûãÁªìÊûÑ",
        valueGetter: (params: any) =>
          apartmentTypeToString(params.data.apartment_type),
      },
      {
        field: "owner",
        headerName: "‰∏ö‰∏ª",
        width: 300,
        valueGetter: (params: any) => ownerToString(params.data.owner),
      },
      {
        field: "community",
        headerName: "Â∞èÂå∫",
        width: 500,
        valueGetter: (params: any) => communityToString(params.data.community),
      },

      {
        field: "building_area",
        headerName: "Âª∫Á≠ëÈù¢ÁßØ",
        valueGetter: (params: any) =>
          emptyToString(params.data?.building_area, "Âπ≥ÊñπÁ±≥"),
      },
      {
        field: "use_area",
        headerName: "‰ΩøÁî®Èù¢ÁßØ",
        valueGetter: (params: any) => {
          return emptyToString(params.data.use_area, "Âπ≥ÊñπÁ±≥");
        },
      },
      {
        field: "floor_range",
        headerName: "Ê•ºÂ±Ç",
        valueGetter: (params: any) =>
          floor_rangeToString(params.data.floor_range),
      },

      { field: "house_decoration", headerName: "Ë£Ö‰øÆ" },
      {
        field: "sale_price",
        headerName: "ÂîÆ‰ª∑",
        valueGetter: (params: any) =>
          emptyToString(params.data?.sale_price, "‰∏áÂÖÉ"),
      },
      {
        field: "sale_low_price",
        headerName: "Âá∫ÂîÆ‰Ωé‰ª∑",
        valueGetter: (params: any) =>
          emptyToString(params.data?.sale_low_price, "‰∏áÂÖÉ"),
      },
      {
        field: "rent_price",
        headerName: "Áßü‰ª∑",
        valueGetter: (params: any) =>
          emptyToString(params.data?.rent_price, "ÂÖÉ/Êúà"),
      },
      {
        field: "rent_low_price",
        headerName: "Âá∫Áßü‰Ωé‰ª∑",
        valueGetter: (params: any) =>
          emptyToString(params.data?.building_area, "ÂÖÉ/Êúà"),
      },
      {
        field: "down_payment",
        headerName: "È¶ñ‰ªò",
        valueGetter: (params: any) =>
          emptyToString(params.data?.down_payment, "%"),
      },
      { field: "house_type", headerName: "ÊàøÂ±ãÁ±ªÂûã" },
      { field: "house_orientation", headerName: "ÊúùÂêë" },
      { field: "building_structure", headerName: "Âª∫Á≠ëÁªìÊûÑ" },
      { field: "building_year", headerName: "Âª∫Á≠ëÂπ¥‰ª£" },
      { field: "property_rights", headerName: "‰∫ßÊùÉÊÄßË¥®" },
      { field: "property_year_limit", headerName: "‰∫ßÊùÉÂπ¥Èôê" },
      { field: "certificate_date", headerName: "‰∫ßËØÅÊó•Êúü" },
      { field: "handover_date", headerName: "‰∫§ÊàøÊó•Êúü" },
      { field: "tags", headerName: "Êé®ËçêÊ†áÁ≠æ" },
      { field: "car_height", headerName: "ËΩ¶‰ΩçÈ´òÂ∫¶" },
      { field: "actual_rate", headerName: "ÂÆûÁéá" },
      { field: "level", headerName: "Á∫ßÂà´" },
      { field: "progress_depth", headerName: "ËøõÊ∑±" },
      { field: "door_width", headerName: "Èó®ÂÆΩ" },
      { field: "discount_year_limit", headerName: "Êª°ÂáèÂπ¥Èôê" },
      {
        field: "stairs",
        headerName: "Ê¢ØÊà∑",
        valueGetter: (params: any) => stairsToString(params.data.stairs),
      },
      { field: "view_method", headerName: "ÁúãÊàøÊñπÂºè" },
      { field: "payment_method", headerName: "‰ªòÊ¨æÊñπÂºè" },
      { field: "property_tax", headerName: "ÊàøÊ∫êÁ®éË¥π" },
      { field: "degree", headerName: "Â≠¶‰Ωç" },
      { field: "household", headerName: "Êà∑Âè£" },
      { field: "source", headerName: "Êù•Ê∫ê" },
      { field: "delegate_number", headerName: "ÂßîÊâòÁºñÂè∑" },
      { field: "unique_housing", headerName: "ÂîØ‰∏Ä‰ΩèÊàø" },
      { field: "full_payment", headerName: "ÂÖ®Ê¨æ" },
      { field: "mortgage", headerName: "ÊäµÊäº" },
      { field: "urgent", headerName: "ÊÄ•Âàá" },
      { field: "support", headerName: "ÈÖçÂ•ó" },
      { field: "present_state", headerName: "Áé∞Áä∂" },
      { field: "external_sync", headerName: "Â§ñÁΩëÂêåÊ≠•" },
      { field: "remark", headerName: "Â§áÊ≥®" },

      {
        field: "updated_at",
        headerName: "Êõ¥Êñ∞Êó∂Èó¥",
        cellRenderer: (params: any) => dateToString(params.data.updated_at),
      },
    ].map((item: any) => {
      const newItem: ColDef<IRow> = item;

      if (newItem.cellRenderer === undefined) {
        newItem.cellRenderer = (params: any) => {
          return emptyToString(params.value);
        };
      }

      return newItem;
    })
  );

  const defaultColDef: ColDef = {
    filter: "agTextColumnFilter",
    sortable: true,
    resizable: true,
  };

  const handleCellClick = (event: CellDoubleClickedEvent<Community>) => {
    console.log("ÂçïÂÖÉÊ†ºÁÇπÂáª:", event);
    console.log("Ë°åÊï∞ÊçÆ:", event.data);
    console.log("ÂàóÂ≠óÊÆµ:", event.colDef.field);
    console.log("ÂÄº:", event.value);

    if (event.colDef.field === "images") {
      openImages(
        ((event.value as IRow["images"]) || []).map((item) => ({
          src: item.url,
          key: item.name,
        }))
      );
      return;
    }
    openDetail(event.value);
  };

  const getContextMenuItems = (params: any) => {
    const defaultItems = params.defaultItems || [];
    return [
      {
        name: params.node ? "ÁºñËæëÊàøÊ∫ê" : "Êñ∞Â¢ûÊàøÊ∫ê",
        action: () => {
          setEditItem(params.node?.data ?? {});
        },
        icon: "‚úèÔ∏è",
      },
      {
        name: "Âà∑Êñ∞",
        action: () => refreshHouse(),
        icon: "üîÑ",
      },
      {
        name: "Âº∫Âà∂Âà∑Êñ∞",
        action: () => forceRefreshHouse(),
        icon: "üîÉ",
      },
      "separator",
      ...defaultItems, // ÂåÖÂê´ÈªòËÆ§ËèúÂçïÈ°π
    ];
  };

  // Container: Defines the grid's theme & dimensions.
  return (
    <>
      <Stack
        direction="column"
        spacing={2}
        sx={{ height: "100%", width: "100%" }}
      >
        <Typography level="h3">Â∞èÂå∫ÁÆ°ÁêÜ</Typography>
        <Stack
          direction="row"
          spacing={2}
          sx={{ alignItems: "flex-end", justifyContent: "space-between" }}
        >
          <AlertTableHelp name="HouseTable" />
          <Stack
            direction="row"
            spacing={2}
            flex={1}
            justifyContent={"flex-end"}
          >
            <Button
              color="warning"
              onClick={() => {
                gridRef.current?.api.exportDataAsCsv();
              }}
            >
              Â§á‰ªΩÂØºÂá∫
            </Button>
          </Stack>
        </Stack>
        <AgGridReact
          cellSelection
          rowSelection="single"
          rowData={rowData}
          theme={mode === "dark" ? darkTheme : lightTheme}
          columnDefs={colDefs}
          defaultColDef={defaultColDef}
          pagination={true}
          ref={gridRef}
          localeText={AG_GRID_LOCALE_CN}
          onCellDoubleClicked={handleCellClick}
          sideBar={{ toolPanels: ["columns"] }}
          getContextMenuItems={getContextMenuItems}
        />
      </Stack>
      <Drawer
        anchor="bottom"
        sx={{}}
        slotProps={{
          content: {
            sx: {
              height: "100vh",
              width: { xs: "100%", md: "430px" },
              top: 0,
              left: { xs: 0, md: "calc(50% - 215px)" },
              borderRadius: 0,
              boxShadow: "lg",
              p: 0,
              backgroundColor: "background.body",
              overflow: "auto",
            },
          },
        }}
        open={editItem !== null}
        onClose={(_, reason) => {
          // if (reason === "backdropClick") return;
          setEditItem(null);
        }}
      >
        <ModalClose />
        <DialogTitle>Ê∑ªÂä†ÊàøÊ∫ê</DialogTitle>
        <Box sx={{ height: "100%", width: { xs: "100%", md: "430px" } }}>
          <House.Form value={editItem} onSubmit={() => setEditItem(null)} />
        </Box>
      </Drawer>
      {detailModal}
    </>
  );
}

// Render GridExample
